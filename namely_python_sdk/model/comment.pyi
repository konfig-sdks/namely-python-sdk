# coding: utf-8

"""
    Namely API

    Move your app forward with the Namely API Move your app forward with the Namely API

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from namely_python_sdk import schemas  # noqa: F401


class Comment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            content = schemas.StrSchema
            html_content = schemas.StrSchema
            created_at = schemas.IntSchema
            can_destroy = schemas.BoolSchema
        
            @staticmethod
            def links() -> typing.Type['CommentLinks']:
                return CommentLinks
            utc_offset = schemas.IntSchema
            likes_count = schemas.IntSchema
            liked_by_current_profile = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "content": content,
                "html_content": html_content,
                "created_at": created_at,
                "can_destroy": can_destroy,
                "links": links,
                "utc_offset": utc_offset,
                "likes_count": likes_count,
                "liked_by_current_profile": liked_by_current_profile,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content"]) -> MetaOapg.properties.content: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["html_content"]) -> MetaOapg.properties.html_content: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_destroy"]) -> MetaOapg.properties.can_destroy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> 'CommentLinks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["utc_offset"]) -> MetaOapg.properties.utc_offset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["likes_count"]) -> MetaOapg.properties.likes_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liked_by_current_profile"]) -> MetaOapg.properties.liked_by_current_profile: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "content", "html_content", "created_at", "can_destroy", "links", "utc_offset", "likes_count", "liked_by_current_profile", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content"]) -> typing.Union[MetaOapg.properties.content, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["html_content"]) -> typing.Union[MetaOapg.properties.html_content, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> typing.Union[MetaOapg.properties.created_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_destroy"]) -> typing.Union[MetaOapg.properties.can_destroy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union['CommentLinks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["utc_offset"]) -> typing.Union[MetaOapg.properties.utc_offset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["likes_count"]) -> typing.Union[MetaOapg.properties.likes_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liked_by_current_profile"]) -> typing.Union[MetaOapg.properties.liked_by_current_profile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "content", "html_content", "created_at", "can_destroy", "links", "utc_offset", "likes_count", "liked_by_current_profile", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        content: typing.Union[MetaOapg.properties.content, str, schemas.Unset] = schemas.unset,
        html_content: typing.Union[MetaOapg.properties.html_content, str, schemas.Unset] = schemas.unset,
        created_at: typing.Union[MetaOapg.properties.created_at, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        can_destroy: typing.Union[MetaOapg.properties.can_destroy, bool, schemas.Unset] = schemas.unset,
        links: typing.Union['CommentLinks', schemas.Unset] = schemas.unset,
        utc_offset: typing.Union[MetaOapg.properties.utc_offset, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        likes_count: typing.Union[MetaOapg.properties.likes_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        liked_by_current_profile: typing.Union[MetaOapg.properties.liked_by_current_profile, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Comment':
        return super().__new__(
            cls,
            *args,
            id=id,
            content=content,
            html_content=html_content,
            created_at=created_at,
            can_destroy=can_destroy,
            links=links,
            utc_offset=utc_offset,
            likes_count=likes_count,
            liked_by_current_profile=liked_by_current_profile,
            _configuration=_configuration,
            **kwargs,
        )

from namely_python_sdk.model.comment_links import CommentLinks
