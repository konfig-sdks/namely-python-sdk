# coding: utf-8

"""
    Namely API

    Move your app forward with the Namely API Move your app forward with the Namely API

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from namely_python_sdk import schemas  # noqa: F401


class CreateProfilePayload(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "user_status",
            "last_name",
            "first_name",
            "email",
            "personal_email",
            "start_date",
        }
        
        class properties:
            first_name = schemas.StrSchema
            last_name = schemas.StrSchema
            user_status = schemas.StrSchema
            start_date = schemas.StrSchema
            email = schemas.StrSchema
            personal_email = schemas.StrSchema
            __annotations__ = {
                "first_name": first_name,
                "last_name": last_name,
                "user_status": user_status,
                "start_date": start_date,
                "email": email,
                "personal_email": personal_email,
            }
    
    user_status: MetaOapg.properties.user_status
    last_name: MetaOapg.properties.last_name
    first_name: MetaOapg.properties.first_name
    email: MetaOapg.properties.email
    personal_email: MetaOapg.properties.personal_email
    start_date: MetaOapg.properties.start_date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_status"]) -> MetaOapg.properties.user_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personal_email"]) -> MetaOapg.properties.personal_email: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["first_name", "last_name", "user_status", "start_date", "email", "personal_email", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_status"]) -> MetaOapg.properties.user_status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personal_email"]) -> MetaOapg.properties.personal_email: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["first_name", "last_name", "user_status", "start_date", "email", "personal_email", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        user_status: typing.Union[MetaOapg.properties.user_status, str, ],
        last_name: typing.Union[MetaOapg.properties.last_name, str, ],
        first_name: typing.Union[MetaOapg.properties.first_name, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        personal_email: typing.Union[MetaOapg.properties.personal_email, str, ],
        start_date: typing.Union[MetaOapg.properties.start_date, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateProfilePayload':
        return super().__new__(
            cls,
            *args,
            user_status=user_status,
            last_name=last_name,
            first_name=first_name,
            email=email,
            personal_email=personal_email,
            start_date=start_date,
            _configuration=_configuration,
            **kwargs,
        )
