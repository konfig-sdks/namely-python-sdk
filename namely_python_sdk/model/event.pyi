# coding: utf-8

"""
    Namely API

    Move your app forward with the Namely API Move your app forward with the Namely API

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from namely_python_sdk import schemas  # noqa: F401


class Event(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            href = schemas.StrSchema
            type = schemas.StrSchema
            time = schemas.IntSchema
            ufc_offset = schemas.IntSchema
            content = schemas.StrSchema
            html_content = schemas.StrSchema
            years_at_company = schemas.IntSchema
            use_comments = schemas.BoolSchema
            can_comment = schemas.BoolSchema
            can_destroy = schemas.BoolSchema
        
            @staticmethod
            def links() -> typing.Type['EventLinks']:
                return EventLinks
            can_like = schemas.BoolSchema
            likes_count = schemas.IntSchema
            liked_by_current_profile = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "href": href,
                "type": type,
                "time": time,
                "ufc_offset": ufc_offset,
                "content": content,
                "html_content": html_content,
                "years_at_company": years_at_company,
                "use_comments": use_comments,
                "can_comment": can_comment,
                "can_destroy": can_destroy,
                "links": links,
                "can_like": can_like,
                "likes_count": likes_count,
                "liked_by_current_profile": liked_by_current_profile,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ufc_offset"]) -> MetaOapg.properties.ufc_offset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content"]) -> MetaOapg.properties.content: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["html_content"]) -> MetaOapg.properties.html_content: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["years_at_company"]) -> MetaOapg.properties.years_at_company: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_comments"]) -> MetaOapg.properties.use_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_comment"]) -> MetaOapg.properties.can_comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_destroy"]) -> MetaOapg.properties.can_destroy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> 'EventLinks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_like"]) -> MetaOapg.properties.can_like: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["likes_count"]) -> MetaOapg.properties.likes_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liked_by_current_profile"]) -> MetaOapg.properties.liked_by_current_profile: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "href", "type", "time", "ufc_offset", "content", "html_content", "years_at_company", "use_comments", "can_comment", "can_destroy", "links", "can_like", "likes_count", "liked_by_current_profile", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["href"]) -> typing.Union[MetaOapg.properties.href, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> typing.Union[MetaOapg.properties.time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ufc_offset"]) -> typing.Union[MetaOapg.properties.ufc_offset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content"]) -> typing.Union[MetaOapg.properties.content, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["html_content"]) -> typing.Union[MetaOapg.properties.html_content, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["years_at_company"]) -> typing.Union[MetaOapg.properties.years_at_company, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_comments"]) -> typing.Union[MetaOapg.properties.use_comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_comment"]) -> typing.Union[MetaOapg.properties.can_comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_destroy"]) -> typing.Union[MetaOapg.properties.can_destroy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union['EventLinks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_like"]) -> typing.Union[MetaOapg.properties.can_like, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["likes_count"]) -> typing.Union[MetaOapg.properties.likes_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liked_by_current_profile"]) -> typing.Union[MetaOapg.properties.liked_by_current_profile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "href", "type", "time", "ufc_offset", "content", "html_content", "years_at_company", "use_comments", "can_comment", "can_destroy", "links", "can_like", "likes_count", "liked_by_current_profile", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        href: typing.Union[MetaOapg.properties.href, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        time: typing.Union[MetaOapg.properties.time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ufc_offset: typing.Union[MetaOapg.properties.ufc_offset, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        content: typing.Union[MetaOapg.properties.content, str, schemas.Unset] = schemas.unset,
        html_content: typing.Union[MetaOapg.properties.html_content, str, schemas.Unset] = schemas.unset,
        years_at_company: typing.Union[MetaOapg.properties.years_at_company, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        use_comments: typing.Union[MetaOapg.properties.use_comments, bool, schemas.Unset] = schemas.unset,
        can_comment: typing.Union[MetaOapg.properties.can_comment, bool, schemas.Unset] = schemas.unset,
        can_destroy: typing.Union[MetaOapg.properties.can_destroy, bool, schemas.Unset] = schemas.unset,
        links: typing.Union['EventLinks', schemas.Unset] = schemas.unset,
        can_like: typing.Union[MetaOapg.properties.can_like, bool, schemas.Unset] = schemas.unset,
        likes_count: typing.Union[MetaOapg.properties.likes_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        liked_by_current_profile: typing.Union[MetaOapg.properties.liked_by_current_profile, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Event':
        return super().__new__(
            cls,
            *args,
            id=id,
            href=href,
            type=type,
            time=time,
            ufc_offset=ufc_offset,
            content=content,
            html_content=html_content,
            years_at_company=years_at_company,
            use_comments=use_comments,
            can_comment=can_comment,
            can_destroy=can_destroy,
            links=links,
            can_like=can_like,
            likes_count=likes_count,
            liked_by_current_profile=liked_by_current_profile,
            _configuration=_configuration,
            **kwargs,
        )

from namely_python_sdk.model.event_links import EventLinks
