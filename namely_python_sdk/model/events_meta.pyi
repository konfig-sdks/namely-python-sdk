# coding: utf-8

"""
    Namely API

    Move your app forward with the Namely API Move your app forward with the Namely API

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from namely_python_sdk import schemas  # noqa: F401


class EventsMeta(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            response = schemas.IntSchema
            use_comments = schemas.BoolSchema
            use_updates = schemas.BoolSchema
            use_mentions = schemas.BoolSchema
            use_appreciations = schemas.BoolSchema
            use_likes = schemas.BoolSchema
            count = schemas.IntSchema
            __annotations__ = {
                "response": response,
                "use_comments": use_comments,
                "use_updates": use_updates,
                "use_mentions": use_mentions,
                "use_appreciations": use_appreciations,
                "use_likes": use_likes,
                "count": count,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["response"]) -> MetaOapg.properties.response: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_comments"]) -> MetaOapg.properties.use_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_updates"]) -> MetaOapg.properties.use_updates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_mentions"]) -> MetaOapg.properties.use_mentions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_appreciations"]) -> MetaOapg.properties.use_appreciations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_likes"]) -> MetaOapg.properties.use_likes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["response", "use_comments", "use_updates", "use_mentions", "use_appreciations", "use_likes", "count", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["response"]) -> typing.Union[MetaOapg.properties.response, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_comments"]) -> typing.Union[MetaOapg.properties.use_comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_updates"]) -> typing.Union[MetaOapg.properties.use_updates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_mentions"]) -> typing.Union[MetaOapg.properties.use_mentions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_appreciations"]) -> typing.Union[MetaOapg.properties.use_appreciations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_likes"]) -> typing.Union[MetaOapg.properties.use_likes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["response", "use_comments", "use_updates", "use_mentions", "use_appreciations", "use_likes", "count", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        response: typing.Union[MetaOapg.properties.response, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        use_comments: typing.Union[MetaOapg.properties.use_comments, bool, schemas.Unset] = schemas.unset,
        use_updates: typing.Union[MetaOapg.properties.use_updates, bool, schemas.Unset] = schemas.unset,
        use_mentions: typing.Union[MetaOapg.properties.use_mentions, bool, schemas.Unset] = schemas.unset,
        use_appreciations: typing.Union[MetaOapg.properties.use_appreciations, bool, schemas.Unset] = schemas.unset,
        use_likes: typing.Union[MetaOapg.properties.use_likes, bool, schemas.Unset] = schemas.unset,
        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EventsMeta':
        return super().__new__(
            cls,
            *args,
            response=response,
            use_comments=use_comments,
            use_updates=use_updates,
            use_mentions=use_mentions,
            use_appreciations=use_appreciations,
            use_likes=use_likes,
            count=count,
            _configuration=_configuration,
            **kwargs,
        )
