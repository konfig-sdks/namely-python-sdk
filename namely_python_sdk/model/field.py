# coding: utf-8

"""
    Namely API

    Move your app forward with the Namely API Move your app forward with the Namely API

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from namely_python_sdk import schemas  # noqa: F401


class Field(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            label = schemas.StrSchema
            type = schemas.StrSchema
            default = schemas.BoolSchema
            deletable = schemas.BoolSchema
            valid_format_info = schemas.StrSchema
            block_index = schemas.IntSchema
        
            @staticmethod
            def links() -> typing.Type['FieldLinks']:
                return FieldLinks
            example = schemas.BoolSchema
            x_konfig_original_example = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "label": label,
                "type": type,
                "default": default,
                "deletable": deletable,
                "valid_format_info": valid_format_info,
                "block_index": block_index,
                "links": links,
                "example": example,
                "x-konfig-original-example": x_konfig_original_example,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default"]) -> MetaOapg.properties.default: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deletable"]) -> MetaOapg.properties.deletable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valid_format_info"]) -> MetaOapg.properties.valid_format_info: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["block_index"]) -> MetaOapg.properties.block_index: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> 'FieldLinks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["example"]) -> MetaOapg.properties.example: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x-konfig-original-example"]) -> MetaOapg.properties.x_konfig_original_example: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "label", "type", "default", "deletable", "valid_format_info", "block_index", "links", "example", "x-konfig-original-example", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default"]) -> typing.Union[MetaOapg.properties.default, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deletable"]) -> typing.Union[MetaOapg.properties.deletable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valid_format_info"]) -> typing.Union[MetaOapg.properties.valid_format_info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["block_index"]) -> typing.Union[MetaOapg.properties.block_index, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union['FieldLinks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["example"]) -> typing.Union[MetaOapg.properties.example, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x-konfig-original-example"]) -> typing.Union[MetaOapg.properties.x_konfig_original_example, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "label", "type", "default", "deletable", "valid_format_info", "block_index", "links", "example", "x-konfig-original-example", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        default: typing.Union[MetaOapg.properties.default, bool, schemas.Unset] = schemas.unset,
        deletable: typing.Union[MetaOapg.properties.deletable, bool, schemas.Unset] = schemas.unset,
        valid_format_info: typing.Union[MetaOapg.properties.valid_format_info, str, schemas.Unset] = schemas.unset,
        block_index: typing.Union[MetaOapg.properties.block_index, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        links: typing.Union['FieldLinks', schemas.Unset] = schemas.unset,
        example: typing.Union[MetaOapg.properties.example, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Field':
        return super().__new__(
            cls,
            *args,
            id=id,
            name=name,
            label=label,
            type=type,
            default=default,
            deletable=deletable,
            valid_format_info=valid_format_info,
            block_index=block_index,
            links=links,
            example=example,
            _configuration=_configuration,
            **kwargs,
        )

from namely_python_sdk.model.field_links import FieldLinks
