# coding: utf-8

"""
    Namely API

    Move your app forward with the Namely API Move your app forward with the Namely API

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from namely_python_sdk import schemas  # noqa: F401


class GetNotificationsResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def notifications() -> typing.Type['GenericNotification']:
                return GenericNotification
        
            @staticmethod
            def links() -> typing.Type['GetNotificationsResponseLinks']:
                return GetNotificationsResponseLinks
        
            @staticmethod
            def linked() -> typing.Type['GetNotificationsResponseLinked']:
                return GetNotificationsResponseLinked
            __annotations__ = {
                "notifications": notifications,
                "links": links,
                "linked": linked,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notifications"]) -> 'GenericNotification': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> 'GetNotificationsResponseLinks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["linked"]) -> 'GetNotificationsResponseLinked': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["notifications", "links", "linked", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notifications"]) -> typing.Union['GenericNotification', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union['GetNotificationsResponseLinks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["linked"]) -> typing.Union['GetNotificationsResponseLinked', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["notifications", "links", "linked", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        notifications: typing.Union['GenericNotification', schemas.Unset] = schemas.unset,
        links: typing.Union['GetNotificationsResponseLinks', schemas.Unset] = schemas.unset,
        linked: typing.Union['GetNotificationsResponseLinked', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetNotificationsResponse':
        return super().__new__(
            cls,
            *args,
            notifications=notifications,
            links=links,
            linked=linked,
            _configuration=_configuration,
            **kwargs,
        )

from namely_python_sdk.model.generic_notification import GenericNotification
from namely_python_sdk.model.get_notifications_response_linked import GetNotificationsResponseLinked
from namely_python_sdk.model.get_notifications_response_links import GetNotificationsResponseLinks
