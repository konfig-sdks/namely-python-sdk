# coding: utf-8

"""
    Namely API

    Move your app forward with the Namely API Move your app forward with the Namely API

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from namely_python_sdk import schemas  # noqa: F401


class GetNotificationsResponseLinks(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def notifications_profile_id() -> typing.Type['Link']:
                return Link
        
            @staticmethod
            def profiles_job_title() -> typing.Type['Link']:
                return Link
        
            @staticmethod
            def profiles_image() -> typing.Type['Link']:
                return Link
        
            @staticmethod
            def notifications_requester_id() -> typing.Type['Link']:
                return Link
        
            @staticmethod
            def notifications_responder_id() -> typing.Type['Link']:
                return Link
            __annotations__ = {
                "notifications.profile_id": notifications_profile_id,
                "profiles.job_title": profiles_job_title,
                "profiles.image": profiles_image,
                "notifications.requester_id": notifications_requester_id,
                "notifications.responder_id": notifications_responder_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notifications.profile_id"]) -> 'Link': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profiles.job_title"]) -> 'Link': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profiles.image"]) -> 'Link': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notifications.requester_id"]) -> 'Link': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notifications.responder_id"]) -> 'Link': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["notifications.profile_id", "profiles.job_title", "profiles.image", "notifications.requester_id", "notifications.responder_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notifications.profile_id"]) -> typing.Union['Link', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profiles.job_title"]) -> typing.Union['Link', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profiles.image"]) -> typing.Union['Link', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notifications.requester_id"]) -> typing.Union['Link', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notifications.responder_id"]) -> typing.Union['Link', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["notifications.profile_id", "profiles.job_title", "profiles.image", "notifications.requester_id", "notifications.responder_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetNotificationsResponseLinks':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from namely_python_sdk.model.link import Link
