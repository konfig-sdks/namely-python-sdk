# coding: utf-8

"""
    Namely API

    Move your app forward with the Namely API Move your app forward with the Namely API

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from namely_python_sdk import schemas  # noqa: F401


class PayGroup(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            id = schemas.StrSchema
            pay_period_name = schemas.StrSchema
            pay_period_per_year = schemas.IntSchema
            payroll_company_id = schemas.StrSchema
            read_only = schemas.BoolSchema
            __annotations__ = {
                "title": title,
                "id": id,
                "pay_period_name": pay_period_name,
                "pay_period_per_year": pay_period_per_year,
                "payroll_company_id": payroll_company_id,
                "read_only": read_only,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_period_name"]) -> MetaOapg.properties.pay_period_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_period_per_year"]) -> MetaOapg.properties.pay_period_per_year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payroll_company_id"]) -> MetaOapg.properties.payroll_company_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["read_only"]) -> MetaOapg.properties.read_only: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "id", "pay_period_name", "pay_period_per_year", "payroll_company_id", "read_only", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_period_name"]) -> typing.Union[MetaOapg.properties.pay_period_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_period_per_year"]) -> typing.Union[MetaOapg.properties.pay_period_per_year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payroll_company_id"]) -> typing.Union[MetaOapg.properties.payroll_company_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["read_only"]) -> typing.Union[MetaOapg.properties.read_only, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "id", "pay_period_name", "pay_period_per_year", "payroll_company_id", "read_only", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        pay_period_name: typing.Union[MetaOapg.properties.pay_period_name, str, schemas.Unset] = schemas.unset,
        pay_period_per_year: typing.Union[MetaOapg.properties.pay_period_per_year, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        payroll_company_id: typing.Union[MetaOapg.properties.payroll_company_id, str, schemas.Unset] = schemas.unset,
        read_only: typing.Union[MetaOapg.properties.read_only, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayGroup':
        return super().__new__(
            cls,
            *args,
            title=title,
            id=id,
            pay_period_name=pay_period_name,
            pay_period_per_year=pay_period_per_year,
            payroll_company_id=payroll_company_id,
            read_only=read_only,
            _configuration=_configuration,
            **kwargs,
        )
