# coding: utf-8

"""
    Namely API

    Move your app forward with the Namely API Move your app forward with the Namely API

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from namely_python_sdk import schemas  # noqa: F401


class Salary(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            currency_type = schemas.StrSchema
            date = schemas.StrSchema
            guid = schemas.StrSchema
            pay_group_id = schemas.IntSchema
            payroll_job_id = schemas.StrSchema
            rate = schemas.StrSchema
            yearly_amount = schemas.IntSchema
            hourly = schemas.BoolSchema
            amount_raw = schemas.StrSchema
            payroll_company = schemas.StrSchema
            payroll_job = schemas.StrSchema
            __annotations__ = {
                "currency_type": currency_type,
                "date": date,
                "guid": guid,
                "pay_group_id": pay_group_id,
                "payroll_job_id": payroll_job_id,
                "rate": rate,
                "yearly_amount": yearly_amount,
                "hourly": hourly,
                "amount_raw": amount_raw,
                "payroll_company": payroll_company,
                "payroll_job": payroll_job,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency_type"]) -> MetaOapg.properties.currency_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pay_group_id"]) -> MetaOapg.properties.pay_group_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payroll_job_id"]) -> MetaOapg.properties.payroll_job_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate"]) -> MetaOapg.properties.rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yearly_amount"]) -> MetaOapg.properties.yearly_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hourly"]) -> MetaOapg.properties.hourly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount_raw"]) -> MetaOapg.properties.amount_raw: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payroll_company"]) -> MetaOapg.properties.payroll_company: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payroll_job"]) -> MetaOapg.properties.payroll_job: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["currency_type", "date", "guid", "pay_group_id", "payroll_job_id", "rate", "yearly_amount", "hourly", "amount_raw", "payroll_company", "payroll_job", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency_type"]) -> typing.Union[MetaOapg.properties.currency_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> typing.Union[MetaOapg.properties.guid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pay_group_id"]) -> typing.Union[MetaOapg.properties.pay_group_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payroll_job_id"]) -> typing.Union[MetaOapg.properties.payroll_job_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate"]) -> typing.Union[MetaOapg.properties.rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yearly_amount"]) -> typing.Union[MetaOapg.properties.yearly_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hourly"]) -> typing.Union[MetaOapg.properties.hourly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount_raw"]) -> typing.Union[MetaOapg.properties.amount_raw, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payroll_company"]) -> typing.Union[MetaOapg.properties.payroll_company, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payroll_job"]) -> typing.Union[MetaOapg.properties.payroll_job, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["currency_type", "date", "guid", "pay_group_id", "payroll_job_id", "rate", "yearly_amount", "hourly", "amount_raw", "payroll_company", "payroll_job", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        currency_type: typing.Union[MetaOapg.properties.currency_type, str, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, schemas.Unset] = schemas.unset,
        guid: typing.Union[MetaOapg.properties.guid, str, schemas.Unset] = schemas.unset,
        pay_group_id: typing.Union[MetaOapg.properties.pay_group_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        payroll_job_id: typing.Union[MetaOapg.properties.payroll_job_id, str, schemas.Unset] = schemas.unset,
        rate: typing.Union[MetaOapg.properties.rate, str, schemas.Unset] = schemas.unset,
        yearly_amount: typing.Union[MetaOapg.properties.yearly_amount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hourly: typing.Union[MetaOapg.properties.hourly, bool, schemas.Unset] = schemas.unset,
        amount_raw: typing.Union[MetaOapg.properties.amount_raw, str, schemas.Unset] = schemas.unset,
        payroll_company: typing.Union[MetaOapg.properties.payroll_company, str, schemas.Unset] = schemas.unset,
        payroll_job: typing.Union[MetaOapg.properties.payroll_job, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Salary':
        return super().__new__(
            cls,
            *args,
            currency_type=currency_type,
            date=date,
            guid=guid,
            pay_group_id=pay_group_id,
            payroll_job_id=payroll_job_id,
            rate=rate,
            yearly_amount=yearly_amount,
            hourly=hourly,
            amount_raw=amount_raw,
            payroll_company=payroll_company,
            payroll_job=payroll_job,
            _configuration=_configuration,
            **kwargs,
        )
