# coding: utf-8

"""
    Namely API

    Move your app forward with the Namely API Move your app forward with the Namely API

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from namely_python_sdk import schemas  # noqa: F401


class Thumb(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    different resolutions of the image
    """


    class MetaOapg:
        
        class properties:
            _75x75 = schemas.StrSchema
            _75x75c = schemas.StrSchema
            _150x150 = schemas.StrSchema
            _150x150c = schemas.StrSchema
            _300x300 = schemas.StrSchema
            _300x300c = schemas.StrSchema
            _450x450 = schemas.StrSchema
            _550x450c = schemas.StrSchema
            _800x800 = schemas.StrSchema
            _800x800c = schemas.StrSchema
            __annotations__ = {
                "75x75": _75x75,
                "75x75c": _75x75c,
                "150x150": _150x150,
                "150x150c": _150x150c,
                "300x300": _300x300,
                "300x300c": _300x300c,
                "450x450": _450x450,
                "550x450c": _550x450c,
                "800x800": _800x800,
                "800x800c": _800x800c,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["75x75"]) -> MetaOapg.properties._75x75: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["75x75c"]) -> MetaOapg.properties._75x75c: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["150x150"]) -> MetaOapg.properties._150x150: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["150x150c"]) -> MetaOapg.properties._150x150c: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["300x300"]) -> MetaOapg.properties._300x300: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["300x300c"]) -> MetaOapg.properties._300x300c: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["450x450"]) -> MetaOapg.properties._450x450: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["550x450c"]) -> MetaOapg.properties._550x450c: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["800x800"]) -> MetaOapg.properties._800x800: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["800x800c"]) -> MetaOapg.properties._800x800c: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["75x75", "75x75c", "150x150", "150x150c", "300x300", "300x300c", "450x450", "550x450c", "800x800", "800x800c", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["75x75"]) -> typing.Union[MetaOapg.properties._75x75, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["75x75c"]) -> typing.Union[MetaOapg.properties._75x75c, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["150x150"]) -> typing.Union[MetaOapg.properties._150x150, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["150x150c"]) -> typing.Union[MetaOapg.properties._150x150c, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["300x300"]) -> typing.Union[MetaOapg.properties._300x300, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["300x300c"]) -> typing.Union[MetaOapg.properties._300x300c, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["450x450"]) -> typing.Union[MetaOapg.properties._450x450, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["550x450c"]) -> typing.Union[MetaOapg.properties._550x450c, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["800x800"]) -> typing.Union[MetaOapg.properties._800x800, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["800x800c"]) -> typing.Union[MetaOapg.properties._800x800c, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["75x75", "75x75c", "150x150", "150x150c", "300x300", "300x300c", "450x450", "550x450c", "800x800", "800x800c", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Thumb':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
