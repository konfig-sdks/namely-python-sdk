# coding: utf-8

"""
    Namely API

    Move your app forward with the Namely API Move your app forward with the Namely API

    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from namely_python_sdk.pydantic.comment_links import CommentLinks

class Comment(BaseModel):
    # unique identifier of the comment
    id: typing.Optional[str] = Field(None, alias='id')

    # content of the comment, displayed in markdown
    content: typing.Optional[str] = Field(None, alias='content')

    # content of the comment, displayed in HTML
    html_content: typing.Optional[str] = Field(None, alias='html_content')

    # epoch time that the comment was created
    created_at: typing.Optional[int] = Field(None, alias='created_at')

    # <code>true</code> if the token bearer has a role with permission to delete the comment; will always be <code>true</code> for one's own comment
    can_destroy: typing.Optional[bool] = Field(None, alias='can_destroy')

    links: typing.Optional[CommentLinks] = Field(None, alias='links')

    # the hour difference between UTC and the main office of the company
    utc_offset: typing.Optional[int] = Field(None, alias='utc_offset')

    # total number of likes on comment
    likes_count: typing.Optional[int] = Field(None, alias='likes_count')

    # <code>true</code> if the token bearer has liked this comment
    liked_by_current_profile: typing.Optional[bool] = Field(None, alias='liked_by_current_profile')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
