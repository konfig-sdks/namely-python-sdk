# coding: utf-8

"""
    Namely API

    Move your app forward with the Namely API Move your app forward with the Namely API

    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from namely_python_sdk.pydantic.event_links import EventLinks

class Event(BaseModel):
    # unique identifier of the event
    id: typing.Optional[str] = Field(None, alias='id')

    # a link to the event on the web
    href: typing.Optional[str] = Field(None, alias='href')

    # the type of event: <code>announcement</code> (posted by a profile) or <code>birthday</code>, <code>anniversary</code>, <code>recent_arrival</code> (auto-generated)
    type: typing.Optional[str] = Field(None, alias='type')

    # epoch time that the event was created/generated
    time: typing.Optional[int] = Field(None, alias='time')

    # the hour difference between UTC and the main office of the company
    ufc_offset: typing.Optional[int] = Field(None, alias='ufc_offset')

    # content of the post, displayed in markdown; null for anything but type: <code>announcement</code>
    content: typing.Optional[str] = Field(None, alias='content')

    # content of the post, displayed in HTML; null for anything but type: <code>announcement</code>
    html_content: typing.Optional[str] = Field(None, alias='html_content')

    # number of years related profile has been at the company; null for anything but: <code>anniversary</code>
    years_at_company: typing.Optional[int] = Field(None, alias='years_at_company')

    # <code>true</code> if the company has commenting enabled on the home feed; same as in <code>meta</code>
    use_comments: typing.Optional[bool] = Field(None, alias='use_comments')

    # <code>true</code> if the token bearer has a role with permission to comment on events on the home feed (will be same value on all events)
    can_comment: typing.Optional[bool] = Field(None, alias='can_comment')

    # <code>true</code> if the token bearer has a role with permission to delete the event; will always be <code>true</code> for one's own announcement
    can_destroy: typing.Optional[bool] = Field(None, alias='can_destroy')

    links: typing.Optional[EventLinks] = Field(None, alias='links')

    # <code>true</code> if the token bearer has a role with permission to like events on the home feed (will be same value on all events)
    can_like: typing.Optional[bool] = Field(None, alias='can_like')

    # total number of likes on event
    likes_count: typing.Optional[int] = Field(None, alias='likes_count')

    # <code>true</code> if the token bearer has liked this event
    liked_by_current_profile: typing.Optional[bool] = Field(None, alias='liked_by_current_profile')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
