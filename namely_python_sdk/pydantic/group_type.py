# coding: utf-8

"""
    Namely API

    Move your app forward with the Namely API Move your app forward with the Namely API

    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class GroupType(BaseModel):
    # name/label of the group type
    title: typing.Optional[str] = Field(None, alias='title')

    # unique identifier of the group type
    id: typing.Optional[str] = Field(None, alias='id')

    # immutable, system generated field name for the group type
    field_name: typing.Optional[str] = Field(None, alias='field_name')

    # denotes whether or not the group can be deleted by someone with the appropriate permissions; <code>true</code> for all groups except Departments and Office Location.
    deletable: typing.Optional[bool] = Field(None, alias='deletable')

    # returns one of three group types: office location, department, or custom; location and department are system delivered groups (will also not be deletable)
    type: typing.Optional[str] = Field(None, alias='type')

    # <code>true</code> if the group type has been chosen to display on the \"Teams\" page in Namely, eligible for @mention (additional permissions apply)
    x_groups_as_teams: typing.Optional[bool] = Field(None, alias='x_groups_as_teams')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
