# coding: utf-8

"""
    Namely API

    Move your app forward with the Namely API Move your app forward with the Namely API

    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from namely_python_sdk.pydantic.dental import Dental
from namely_python_sdk.pydantic.healthcare import Healthcare
from namely_python_sdk.pydantic.home import Home
from namely_python_sdk.pydantic.image import Image
from namely_python_sdk.pydantic.job_title_link import JobTitleLink
from namely_python_sdk.pydantic.office import Office
from namely_python_sdk.pydantic.profile_employee_type import ProfileEmployeeType
from namely_python_sdk.pydantic.profile_links import ProfileLinks
from namely_python_sdk.pydantic.profile_reports_to import ProfileReportsTo
from namely_python_sdk.pydantic.salary import Salary

class Profile(BaseModel):
    # unique identifier of the profile
    id: typing.Optional[str] = Field(None, alias='id')

    # company email of the profile
    email: typing.Optional[str] = Field(None, alias='email')

    # first name of the profile
    first_name: typing.Optional[str] = Field(None, alias='first_name')

    # last name of the profile
    last_name: typing.Optional[str] = Field(None, alias='last_name')

    # user status of the profile; valid values in the API are <code>active</code>, <code>pending</code>, and <code>inactive</code>
    user_status: typing.Optional[str] = Field(None, alias='user_status')

    # epoch time that the profile was updated; equal to <code>create_at</code> if never updated
    updated_at: typing.Optional[int] = Field(None, alias='updated_at')

    # epoch time that the profile was created
    created_at: typing.Optional[int] = Field(None, alias='created_at')

    # preferred name of the profile; <code>null</code> if never provided; blank if provided then deleted
    preferred_name: typing.Optional[str] = Field(None, alias='preferred_name')

    image: typing.Optional[Image] = Field(None, alias='image')

    # combination of <code>first_name</code> and <code>last_name</code>
    full_name: typing.Optional[str] = Field(None, alias='full_name')

    job_title: typing.Optional[JobTitleLink] = Field(None, alias='job_title')

    reports_to: typing.Optional[ProfileReportsTo] = Field(None, alias='reports_to')

    employee_type: typing.Optional[ProfileEmployeeType] = Field(None, alias='employee_type')

    # returns the type of access_role assigned to the profile
    access_role: typing.Optional[str] = Field(None, alias='access_role')

    # self described ethnicity of the profile; <code>null</code> if never provided
    ethnicity: typing.Optional[typing.Optional[str]] = Field(None, alias='ethnicity')

    links: typing.Optional[ProfileLinks] = Field(None, alias='links')

    # middle name of the profile; <code>null</code> if never provided; blank if provided then deleted
    middle_name: typing.Optional[str] = Field(None, alias='middle_name')

    # gender of the profile; <code>null</code> if never provided; valid values include <code>Male</code> and <code>Female</code>
    gender: typing.Optional[str] = Field(None, alias='gender')

    # job change reason of the profile; <code>null</code> if never provided; valid values include <code>New Hire</code>, <code>Salary Change</code>, <code>Promotion</code>, and <code>Transfer</code>
    job_change_reason: typing.Optional[str] = Field(None, alias='job_change_reason')

    # terminated reason of the profile; <code>null</code> if never provided
    terminated_reason: typing.Optional[str] = Field(None, alias='terminated_reason')

    # start date of the profile; format <code>YYYY-MM-DD</code>
    start_date: typing.Optional[str] = Field(None, alias='start_date')

    # departure date of the profile; format <code>YYYY-MM-DD</code>; blank if never provided or provided then deleted
    departure_date: typing.Optional[str] = Field(None, alias='departure_date')

    # employee id of the profile; blank if never provided or provided then deleted
    employee_id: typing.Optional[str] = Field(None, alias='employee_id')

    # employee id of the profile; blank if never provided or provided then deleted
    personal_email: typing.Optional[str] = Field(None, alias='personal_email')

    # date of birth of the profile; format <code>YYYY-MM-DD</code>; blank if never provided or provided then deleted
    dob: typing.Optional[str] = Field(None, alias='dob')

    # ssn of the profile; blank if never provided or provided then deleted
    ssn: typing.Optional[str] = Field(None, alias='ssn')

    # marital status of the profile; <code>null</code> if never provided; valid values include <code>Single</code>, <code>Married</code>, <code>Civil Partnership</code>, <code>Separated</code>, and <code>Divorced</code>
    marital_status: typing.Optional[str] = Field(None, alias='marital_status')

    # bio of the profile; <code>null</code> if never provided; blank if provided then deleted
    bio: typing.Optional[str] = Field(None, alias='bio')

    # list of assets on the profile; blank if never provided or provided then deleted; valid values include <code>Laptop</code>, <code>Cell Phone</code>, <code>Building Keys</code>, <code>Corporate Card</code>, and <code>Air Card</code>
    asset_management: typing.Optional[str] = Field(None, alias='asset_management')

    # laptop asset number of the profile; <code>null</code> if never provided; blank if provided then deleted
    laptop_asset_number: typing.Optional[str] = Field(None, alias='laptop_asset_number')

    # corporate card number of the profile; <code>null</code> if never provided; blank if provided then deleted
    corporate_card_member: typing.Optional[str] = Field(None, alias='corporate_card_member')

    # key tag number of the profile; <code>null</code> if never provided; blank if provided then deleted
    key_tag_number: typing.Optional[str] = Field(None, alias='key_tag_number')

    # linkedin_url of the profile; <code>null</code> if never provided; blank if provided then deleted
    linkedin_url: typing.Optional[str] = Field(None, alias='linkedin_url')

    # office main number of the profile; <code>null</code> if never provided; blank if provided then deleted
    office_main_number: typing.Optional[str] = Field(None, alias='office_main_number')

    # office direct dial number of the profile; <code>null</code> if never provided; blank if provided then deleted
    office_direct_dial: typing.Optional[str] = Field(None, alias='office_direct_dial')

    # office phone number of the profile; <code>null</code> if never provided; blank if provided then deleted
    office_phone: typing.Optional[str] = Field(None, alias='office_phone')

    # office fax number of the profile; <code>null</code> if never provided; blank if provided then deleted
    office_fax: typing.Optional[str] = Field(None, alias='office_fax')

    # office company mobile phone number of the profile; <code>null</code> if never provided; blank if provided then deleted
    office_company_mobile: typing.Optional[str] = Field(None, alias='office_company_mobile')

    # home phone number of the profile; <code>null</code> if never provided; blank if provided then deleted
    home_phone: typing.Optional[str] = Field(None, alias='home_phone')

    # mobile phone number of the profile; <code>null</code> if never provided; blank if provided then deleted
    mobile_phone: typing.Optional[str] = Field(None, alias='mobile_phone')

    home: typing.Optional[Home] = Field(None, alias='home')

    office: typing.Optional[Office] = Field(None, alias='office')

    # name of the profile's emergency contact; <code>null</code> if never provided; blank if provided then deleted
    emergency_contact: typing.Optional[str] = Field(None, alias='emergency_contact')

    # phone number of the profile's emergency contact; <code>null</code> if never provided; blank if provided then deleted
    emergency_contact_phone: typing.Optional[str] = Field(None, alias='emergency_contact_phone')

    # resume of the profile; <code>null</code> if never provided; blank if provided then deleted
    resume: typing.Optional[str] = Field(None, alias='resume')

    # current job description of of the profile; <code>null</code> if never provided; blank if provided then deleted
    current_job_description: typing.Optional[str] = Field(None, alias='current_job_description')

    # current job description of of the profile; <code>null</code> if never provided; blank if provided then deleted
    job_description: typing.Optional[str] = Field(None, alias='job_description')

    salary: typing.Optional[Salary] = Field(None, alias='salary')

    healthcare: typing.Optional[Healthcare] = Field(None, alias='healthcare')

    # description of the profile's healthcare plan; <code>null</code> if never provided; blank if provided then deleted
    healthcare_info: typing.Optional[str] = Field(None, alias='healthcare_info')

    dental: typing.Optional[Dental] = Field(None, alias='dental')

    # description of the profile's dental plan; <code>null</code> if never provided; blank if provided then deleted
    dental_info: typing.Optional[str] = Field(None, alias='dental_info')

    # description of the profile's vision plan; <code>null</code> if never provided; blank if provided then deleted
    vision_plan_info: typing.Optional[str] = Field(None, alias='vision_plan_info')

    # description of the profile's life insurance plan; <code>null</code> if never provided; blank if provided then deleted
    life_insurance_info: typing.Optional[str] = Field(None, alias='life_insurance_info')

    # only applies to companies using Namely Time
    namely_time_employee_role: typing.Optional[str] = Field(None, alias='namely_time_employee_role')

    # only applies to companies using Namely Time
    namely_time_manager_role: typing.Optional[str] = Field(None, alias='namely_time_manager_role')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
